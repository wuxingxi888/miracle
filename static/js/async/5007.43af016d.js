"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["5007"],{2942:function(s,n,a){a.r(n),a.d(n,{default:function(){return l}});var t=a(1147);let e=["innerHTML"],l={setup:()=>({html:""}),render:()=>((0,t.wg)(),(0,t.iD)("div",{class:"mi-doc-markdown-body",innerHTML:'<h1>Uploader 文件上传</h1>\n<div class="mi-doc-card"><h3 id="jie-shao" tabindex="-1">介绍</h3>\n<p>用于将本地的图片或文件上传至服务器，并在上传过程中展示预览图和上传进度。目前 Uploader 组件不包含将文件上传至服务器的接口逻辑，该步骤需要自行实现。</p>\n</div><div class="mi-doc-card"><h3 id="yin-ru" tabindex="-1">引入</h3>\n<p>通过以下方式来全局注册组件，更多注册方式请参考<a href="#/zh-CN/advanced-usage#zu-jian-zhu-ce" target="_blank">组件注册</a>。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Uploader</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>();\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Uploader</span>);\n</code></pre>\n</div><h2 id="dai-ma-yan-shi" tabindex="-1">代码演示</h2>\n<div class="mi-doc-card"><h3 id="ji-chu-yong-fa" tabindex="-1">基础用法</h3>\n<p>文件上传完毕后会触发 <code>after-read</code> 回调函数，获取到对应的 <code>file</code> 对象。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">:after-read</span>=<span class="hljs-string">&quot;afterRead&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">afterRead</span> = (<span class="hljs-params">file</span>) =&gt; {\n            <span class="hljs-comment">// 此时可以自行将文件上传至服务器</span>\n            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file);\n        };\n\n        <span class="hljs-keyword">return</span> {\n            afterRead,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="wen-jian-yu-lan" tabindex="-1">文件预览</h3>\n<p>通过 <code>v-model</code> 可以绑定已经上传的文件列表，并展示文件列表的预览图。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fileList&quot;</span> <span class="hljs-attr">multiple</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> fileList = <span class="hljs-title function_">ref</span>([\n            {\n                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/wuxingxi888/CDN_IMG_BED/avatar.jpg&#x27;</span>,\n            },\n            <span class="hljs-comment">// Uploader 根据文件后缀来判断是否为图片文件</span>\n            <span class="hljs-comment">// 如果图片 URL 中不包含类型信息，可以添加 isImage 标记来声明</span>\n            { <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://cloud-image&#x27;</span>, <span class="hljs-attr">isImage</span>: <span class="hljs-literal">true</span> },\n        ]);\n\n        <span class="hljs-keyword">return</span> {\n            fileList,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="shang-chuan-zhuang-tai" tabindex="-1">上传状态</h3>\n<p>通过 <code>status</code> 属性可以标识上传状态，<code>uploading</code> 表示上传中，<code>failed</code> 表示上传失败，<code>done</code> 表示上传完成。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fileList&quot;</span> <span class="hljs-attr">:after-read</span>=<span class="hljs-string">&quot;afterRead&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> fileList = <span class="hljs-title function_">ref</span>([\n            {\n                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/wuxingxi888/CDN_IMG_BED/avatar.jpg&#x27;</span>,\n                <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;uploading&#x27;</span>,\n                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;上传中...&#x27;</span>,\n            },\n            {\n                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/wuxingxi888/CDN_IMG_BED/avatar.jpg&#x27;</span>,\n                <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;failed&#x27;</span>,\n                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;上传失败&#x27;</span>,\n            },\n        ]);\n\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">afterRead</span> = (<span class="hljs-params">file</span>) =&gt; {\n            file.<span class="hljs-property">status</span> = <span class="hljs-string">&#x27;uploading&#x27;</span>;\n            file.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;上传中...&#x27;</span>;\n\n            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n                file.<span class="hljs-property">status</span> = <span class="hljs-string">&#x27;failed&#x27;</span>;\n                file.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;上传失败&#x27;</span>;\n            }, <span class="hljs-number">1000</span>);\n        };\n\n        <span class="hljs-keyword">return</span> {\n            fileList,\n            afterRead,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="xian-zhi-shang-chuan-shu-liang" tabindex="-1">限制上传数量</h3>\n<p>通过 <code>max-count</code> 属性可以限制上传文件的数量，上传数量达到限制后，会自动隐藏上传区域。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fileList&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">:max-count</span>=<span class="hljs-string">&quot;2&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> fileList = <span class="hljs-title function_">ref</span>([]);\n\n        <span class="hljs-keyword">return</span> {\n            fileList,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="xian-zhi-shang-chuan-da-xiao" tabindex="-1">限制上传大小</h3>\n<p>通过 <code>max-size</code> 属性可以限制上传文件的大小，超过大小的文件会被自动过滤，这些文件信息可以通过 <code>oversize</code> 事件获取。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">:max-size</span>=<span class="hljs-string">&quot;500 * 1024&quot;</span> @<span class="hljs-attr">oversize</span>=<span class="hljs-string">&quot;onOversize&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">onOversize</span> = (<span class="hljs-params">file</span>) =&gt; {\n            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file);\n            <span class="hljs-title function_">showToast</span>(<span class="hljs-string">&#x27;文件大小不能超过 500kb&#x27;</span>);\n        };\n\n        <span class="hljs-keyword">return</span> {\n            onOversize,\n        };\n    },\n};\n</code></pre>\n<p>如果需要针对不同类型的文件来作出不同的大小限制，可以在 <code>max-size</code> 属性中传入一个函数，在函数中通过 <code>file.type</code> 区分文件类型，返回 <code>true</code> 表示超出限制，<code>false</code> 表示未超出限制。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">:max-size</span>=<span class="hljs-string">&quot;isOverSize&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">isOverSize</span> = (<span class="hljs-params">file</span>) =&gt; {\n            <span class="hljs-keyword">const</span> maxSize =\n                file.<span class="hljs-property">type</span> === <span class="hljs-string">&#x27;image/jpeg&#x27;</span> ? <span class="hljs-number">500</span> * <span class="hljs-number">1024</span> : <span class="hljs-number">1000</span> * <span class="hljs-number">1024</span>;\n            <span class="hljs-keyword">return</span> file.<span class="hljs-property">size</span> &gt;= maxSize;\n        };\n        <span class="hljs-keyword">return</span> {\n            isOverSize,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="zi-ding-yi-shang-chuan-yang-shi" tabindex="-1">自定义上传样式</h3>\n<p>通过默认插槽可以自定义上传区域的样式。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mi-button</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">&quot;plus&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">mi-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mi-uploader</span>&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="zi-ding-yi-yu-lan-yang-shi" tabindex="-1">自定义预览样式</h3>\n<p>通过 <code>preview-cover</code> 插槽可以自定义覆盖在预览区域上方的内容。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fileList&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">preview-cover</span>=<span class="hljs-string">&quot;{ file }&quot;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;preview-cover mi-ellipsis&quot;</span>&gt;</span>{{ file.name }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mi-uploader</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">\n    <span class="hljs-selector-class">.preview-cover</span> {\n        <span class="hljs-attribute">position</span>: absolute;\n        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;\n        <span class="hljs-attribute">box-sizing</span>: border-box;\n        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;\n        <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span>;\n        <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;\n        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;\n        <span class="hljs-attribute">text-align</span>: center;\n        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);\n    }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="zi-ding-yi-yu-lan-da-xiao" tabindex="-1">自定义预览大小</h3>\n<p>通过 <code>preview-size</code> 属性定义预览图和上传区域的大小。</p>\n<pre><code class="language-html"><span class="hljs-comment">&lt;!-- 不指定单位，默认为 px --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fileList&quot;</span> <span class="hljs-attr">preview-size</span>=<span class="hljs-string">&quot;60&quot;</span> /&gt;</span>\n<span class="hljs-comment">&lt;!-- 指定单位，支持 rem, vh, vw --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fileList&quot;</span> <span class="hljs-attr">preview-size</span>=<span class="hljs-string">&quot;5rem&quot;</span> /&gt;</span>\n</code></pre>\n<p>将 <code>preview-size</code> 设置为数组格式，可以分别设置宽高。数组第一项对应宽度，数组第二项对应高度。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fileList&quot;</span> <span class="hljs-attr">:preview-size</span>=<span class="hljs-string">&quot;[60, 40]&quot;</span> /&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="shang-chuan-qian-zhi-chu-li" tabindex="-1">上传前置处理</h3>\n<p>通过传入 <code>beforeRead</code> 函数可以在上传前进行校验和处理，返回 <code>true</code> 表示校验通过，返回 <code>false</code> 表示校验失败。支持返回 <code>Promise</code> 对 file 对象进行自定义处理，例如压缩图片。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">:before-read</span>=<span class="hljs-string">&quot;beforeRead&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-comment">// 返回布尔值</span>\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">beforeRead</span> = (<span class="hljs-params">file</span>) =&gt; {\n            <span class="hljs-keyword">if</span> (file.<span class="hljs-property">type</span> !== <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) {\n                <span class="hljs-title function_">showToast</span>(<span class="hljs-string">&#x27;请上传 jpg 格式图片&#x27;</span>);\n                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;\n            }\n            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\n        };\n\n        <span class="hljs-comment">// 返回 Promise</span>\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">asyncBeforeRead</span> = (<span class="hljs-params">file</span>) =&gt;\n            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n                <span class="hljs-keyword">if</span> (file.<span class="hljs-property">type</span> !== <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) {\n                    <span class="hljs-title function_">showToast</span>(<span class="hljs-string">&#x27;请上传 jpg 格式图片&#x27;</span>);\n                    <span class="hljs-title function_">reject</span>();\n                } <span class="hljs-keyword">else</span> {\n                    <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>([<span class="hljs-string">&#x27;foo&#x27;</span>], <span class="hljs-string">&#x27;bar.jpg&#x27;</span>, {\n                        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,\n                    });\n                    <span class="hljs-title function_">resolve</span>(img);\n                }\n            });\n\n        <span class="hljs-keyword">return</span> {\n            beforeRead,\n            asyncBeforeRead,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="jin-yong-wen-jian-shang-chuan" tabindex="-1">禁用文件上传</h3>\n<p>通过 <code>disabled</code> 属性禁用文件上传。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">disabled</span> /&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="zi-ding-yi-dan-ge-tu-pian-yu-lan" tabindex="-1">自定义单个图片预览</h3>\n<p>在 <code>v-model</code> 数组中设置单个预览图片属性，支持 <code>imageFit</code> <code>deletable</code> <code>previewSize</code> <code>beforeDelete</code>。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fileList&quot;</span> <span class="hljs-attr">:deletable</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { showToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> fileList = <span class="hljs-title function_">ref</span>([\n            {\n                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/wuxingxi888/CDN_IMG_BED/avatar.jpg&#x27;</span>,\n                <span class="hljs-attr">deletable</span>: <span class="hljs-literal">true</span>,\n                <span class="hljs-attr">beforeDelete</span>: <span class="hljs-function">() =&gt;</span> {\n                    <span class="hljs-title function_">showToast</span>(<span class="hljs-string">&#x27;删除前置处理&#x27;</span>);\n                },\n            },\n            {\n                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/wuxingxi888/CDN_IMG_BED/avatar.jpg&#x27;</span>,\n                <span class="hljs-attr">imageFit</span>: <span class="hljs-string">&#x27;contain&#x27;</span>,\n            },\n        ]);\n\n        <span class="hljs-keyword">return</span> { fileList };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="kai-qi-fu-gai-shang-chuan" tabindex="-1">开启覆盖上传</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fileList&quot;</span> <span class="hljs-attr">reupload</span> <span class="hljs-attr">max-count</span>=<span class="hljs-string">&quot;2&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-ts"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> fileList = <span class="hljs-title function_">ref</span>([\n            {\n                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/wuxingxi888/CDN_IMG_BED/avatar.jpg&#x27;</span>,\n            },\n        ]);\n\n        <span class="hljs-keyword">return</span> { fileList };\n    },\n};\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="mi-doc-card"><h3 id="props" tabindex="-1">Props</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v-model</td>\n<td>已上传的文件列表</td>\n<td><em>FileListItem[]</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>accept</td>\n<td>允许上传的文件类型，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file#%E9%99%90%E5%88%B6%E5%85%81%E8%AE%B8%E7%9A%84%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B" target="_blank">详细说明</a></td>\n<td><em>string</em></td>\n<td><code>image/*</code></td>\n</tr>\n<tr>\n<td>name</td>\n<td>标识符，通常为一个唯一的字符串或数字，可以在回调函数的第二项参数中获取</td>\n<td><em>number | string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>preview-size</td>\n<td>预览图和上传区域的尺寸，默认单位为 <code>px</code></td>\n<td><em>number | string | Array</em></td>\n<td><code>80px</code></td>\n</tr>\n<tr>\n<td>preview-image</td>\n<td>是否在上传完成后展示预览图</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>preview-full-image</td>\n<td>是否在点击预览图后展示全屏图片预览</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>preview-options</td>\n<td>全屏图片预览的配置项，可选值见 <a href="#/zh-CN/image-preview" target="_blank">ImagePreview</a></td>\n<td><em>object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>是否开启图片多选，部分安卓机型不支持</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用文件上传</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>readonly</td>\n<td>是否将上传区域设置为只读状态</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>deletable</td>\n<td>是否展示删除按钮</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>reupload <code>v4.4.0</code></td>\n<td>是否开启覆盖上传，开启后会关闭图片预览</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>show-upload</td>\n<td>是否展示上传区域</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>lazy-load</td>\n<td>是否开启图片懒加载，须配合 <a href="#/zh-CN/lazyload" target="_blank">Lazyload</a> 组件使用</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>capture</td>\n<td>图片选取模式，可选值为 <code>camera</code> (直接调起摄像头)</td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>after-read</td>\n<td>文件读取完成后的回调函数</td>\n<td><em>Function</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>before-read</td>\n<td>文件读取前的回调函数，返回 <code>false</code> 可终止文件读取，<br>支持返回 <code>Promise</code></td>\n<td><em>Function</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>before-delete</td>\n<td>文件删除前的回调函数，返回 <code>false</code> 可终止文件读取，<br>支持返回 <code>Promise</code></td>\n<td><em>Function</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>max-size</td>\n<td>文件大小限制，单位为 <code>byte</code></td>\n<td><em>number | string | (file: File) =&gt; boolean</em></td>\n<td><code>Infinity</code></td>\n</tr>\n<tr>\n<td>max-count</td>\n<td>文件上传数量限制</td>\n<td><em>number | string</em></td>\n<td><code>Infinity</code></td>\n</tr>\n<tr>\n<td>result-type</td>\n<td>文件读取结果类型，可选值为 <code>file</code> <code>text</code></td>\n<td><em>string</em></td>\n<td><code>dataUrl</code></td>\n</tr>\n<tr>\n<td>upload-text</td>\n<td>上传区域文字提示</td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>image-fit</td>\n<td>预览图裁剪模式，可选值见 <a href="#/zh-CN/image" target="_blank">Image</a> 组件</td>\n<td><em>string</em></td>\n<td><code>cover</code></td>\n</tr>\n<tr>\n<td>upload-icon</td>\n<td>上传区域图标名称或图片链接，等同于 Icon 组件的 <a href="#/zh-CN/icon#props" target="_blank">name 属性</a></td>\n<td><em>string</em></td>\n<td><code>photograph</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：accept、capture 和 multiple 为浏览器 input 标签的原生属性，移动端各种机型对这些属性的支持程度有所差异，因此在不同机型和 WebView 下可能出现一些兼容性问题。</p>\n</blockquote>\n</div><div class="mi-doc-card"><h3 id="events" tabindex="-1">Events</h3>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>说明</th>\n<th>回调参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>oversize</td>\n<td>文件大小超过限制时触发</td>\n<td>同 <code>after-read</code></td>\n</tr>\n<tr>\n<td>click-upload</td>\n<td>点击上传区域时触发</td>\n<td><em>event: MouseEvent</em></td>\n</tr>\n<tr>\n<td>click-preview</td>\n<td>点击预览图时触发</td>\n<td>同 <code>after-read</code></td>\n</tr>\n<tr>\n<td>click-reupload</td>\n<td>点击覆盖上传时触发</td>\n<td>同 <code>after-read</code></td>\n</tr>\n<tr>\n<td>close-preview</td>\n<td>关闭全屏图片预览时触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>删除文件预览时触发</td>\n<td>同 <code>after-read</code></td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="slots" tabindex="-1">Slots</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default</td>\n<td>自定义上传区域</td>\n<td>-</td>\n</tr>\n<tr>\n<td>preview-delete</td>\n<td>自定义删除按钮</td>\n<td>-</td>\n</tr>\n<tr>\n<td>preview-cover</td>\n<td>自定义覆盖在预览区域上方的内容</td>\n<td><em>item: FileListItem</em></td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="hui-diao-can-shu" tabindex="-1">回调参数</h3>\n<p>before-read、after-read、before-delete 执行时会传递以下回调参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>file</td>\n<td>file 对象</td>\n<td><em>object</em></td>\n</tr>\n<tr>\n<td>detail</td>\n<td>额外信息，包含 name 和 index 字段</td>\n<td><em>object</em></td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="resulttype-ke-xuan-zhi" tabindex="-1">ResultType 可选值</h3>\n<p><code>result-type</code> 字段表示文件读取结果的类型，上传大文件时，建议使用 file 类型，避免卡顿。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>file</td>\n<td>结果仅包含 File 对象</td>\n</tr>\n<tr>\n<td>text</td>\n<td>结果包含 File 对象，以及文件的文本内容</td>\n</tr>\n<tr>\n<td>dataUrl</td>\n<td>结果包含 File 对象，以及文件对应的 base64 编码</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="fang-fa" tabindex="-1">方法</h3>\n<p>通过 ref 可以获取到 Uploader 实例并调用实例方法，详见<a href="#/zh-CN/advanced-usage#zu-jian-shi-li-fang-fa" target="_blank">组件实例方法</a>。</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>参数</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>closeImagePreview</td>\n<td>关闭全屏的图片预览</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>chooseFile</td>\n<td>主动调起文件选择，由于浏览器安全限制，只有在用户触发操作的上下文中调用才有效</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>reuploadFile <code>4.9.3</code></td>\n<td>主动调起文件选择，选择新文件后将覆盖原先上传的文件，由于浏览器安全限制，只有在用户触发操作的上下文中调用才有效</td>\n<td><em>index: number</em></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="lei-xing-ding-yi" tabindex="-1">类型定义</h3>\n<p>组件导出以下类型定义：</p>\n<pre><code class="language-ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> {\n    <span class="hljs-title class_">UploaderProps</span>,\n    <span class="hljs-title class_">UploaderInstance</span>,\n    <span class="hljs-title class_">UploaderResultType</span>,\n    <span class="hljs-title class_">UploaderFileListItem</span>,\n    <span class="hljs-title class_">UploaderBeforeRead</span>,\n    <span class="hljs-title class_">UploaderAfterRead</span>,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n</code></pre>\n<p><code>UploaderInstance</code> 是组件实例的类型，用法如下：</p>\n<pre><code class="language-ts"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">UploaderInstance</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">const</span> uploaderRef = ref&lt;<span class="hljs-title class_">UploaderInstance</span>&gt;();\n\nuploaderRef.<span class="hljs-property">value</span>?.<span class="hljs-title function_">chooseFile</span>();\n</code></pre>\n</div><h2 id="zhu-ti-ding-zhi" tabindex="-1">主题定制</h2>\n<div class="mi-doc-card"><h3 id="yang-shi-bian-liang" tabindex="-1">样式变量</h3>\n<p>组件提供了下列 CSS 变量，可用于自定义样式，使用方法请参考 <a href="#/zh-CN/config-provider" target="_blank">ConfigProvider 组件</a>。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--mi-uploader-size</td>\n<td><em>80px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-icon-size</td>\n<td><em>24px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-icon-color</td>\n<td><em>var(--mi-gray-4)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-text-color</td>\n<td><em>var(--mi-text-color-2)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-text-font-size</td>\n<td><em>var(--mi-font-size-sm)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-upload-background</td>\n<td><em>var(--mi-gray-1)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-upload-active-color</td>\n<td><em>var(--mi-active-color)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-delete-color</td>\n<td><em>var(--mi-white)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-delete-icon-size</td>\n<td><em>14px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-delete-background</td>\n<td><em>rgba(0, 0, 0, 0.7)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-file-background</td>\n<td><em>var(--mi-background)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-file-icon-size</td>\n<td><em>20px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-file-icon-color</td>\n<td><em>var(--mi-gray-7)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-file-name-padding</td>\n<td><em>0 var(--mi-padding-base)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-file-name-margin-top</td>\n<td><em>var(--mi-padding-xs)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-file-name-font-size</td>\n<td><em>var(--mi-font-size-sm)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-file-name-text-color</td>\n<td><em>var(--mi-gray-7)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-mask-text-color</td>\n<td><em>var(--mi-white)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-mask-background</td>\n<td><em>fade(var(--mi-gray-8), 88%)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-mask-icon-size</td>\n<td><em>22px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-mask-message-font-size</td>\n<td><em>var(--mi-font-size-sm)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-mask-message-line-height</td>\n<td><em>var(--mi-line-height-xs)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-loading-icon-size</td>\n<td><em>22px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-loading-icon-color</td>\n<td><em>var(--mi-white)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-disabled-opacity</td>\n<td><em>var(--mi-disabled-opacity)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-uploader-border-radius</td>\n<td><em>0px</em></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><h2 id="chang-jian-wen-ti" tabindex="-1">常见问题</h2>\n<div class="mi-doc-card"><h3 id="uploader-zai-bu-fen-an-zhuo-ji-xing-shang-wu-fa-shang-chuan-tu-pian" tabindex="-1">Uploader 在部分安卓机型上无法上传图片？</h3>\n<p>Uploader 采用了 HTML 原生的 <code>&lt;input type=&quot;file&quot; /&gt;</code> 标签进行上传，能否上传取决于当前系统和浏览器的兼容性。当遇到无法上传的问题时，一般有以下几种情况：</p>\n<ol>\n<li>遇到了安卓 App WebView 的兼容性问题，需要在安卓原生代码中进行兼容，可以参考此<a href="https://blog.csdn.net/qq_32756581/article/details/112861088" target="_blank">文章</a>。</li>\n<li>图片格式不正确，在当前系统/浏览器中无法识别，比如 <code>webp</code> 或 <code>heic</code> 格式。</li>\n<li>其他浏览器兼容性问题。</li>\n</ol>\n</div><div class="mi-doc-card"><h3 id="pai-zhao-shang-chuan-de-tu-pian-bei-xuan-zhuan-90-du" tabindex="-1">拍照上传的图片被旋转 90 度？</h3>\n<p>部分手机在拍照上传时会出现图片被旋转 90 度的问题，这个问题可以通过 <a href="https://github.com/fengyuanchen/compressorjs" target="_blank">compressorjs</a> 或其他开源库进行处理。</p>\n<p>compressorjs 是一个开源的图片处理库，提供了图片压缩、图片旋转等能力。</p>\n<h4 id="shi-li" tabindex="-1">示例</h4>\n<p>使用 compressorjs 进行处理的示例代码如下:</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-uploader</span> <span class="hljs-attr">:before-read</span>=<span class="hljs-string">&quot;beforeRead&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Compressor</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;compressorjs&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">beforeRead</span> = (<span class="hljs-params">file</span>) =&gt;\n            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {\n                <span class="hljs-comment">// compressorjs 默认开启 checkOrientation 选项</span>\n                <span class="hljs-comment">// 会将图片修正为正确方向</span>\n                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Compressor</span>(file, {\n                    <span class="hljs-attr">success</span>: resolve,\n                    <span class="hljs-title function_">error</span>(<span class="hljs-params">err</span>) {\n                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>);\n                    },\n                });\n            });\n\n        <span class="hljs-keyword">return</span> {\n            beforeRead,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="shang-chuan-tu-pian-shi-chu-xian-liu-lan-qi-shua-xin-huo-qia-dun-xian-xiang" tabindex="-1">上传图片时出现浏览器刷新或卡顿现象？</h3>\n<p>这种现象一般是内存不足导致的，通常发生在旧机型上；上传一张较大的图片引起也引起此现象。</p>\n<p>为了减少这种情况的出现，可以在上传图片前对图片进行压缩，压缩方法请参考上文中提到的 <code>compressorjs</code> 库。</p>\n</div><div class="mi-doc-card"><h3 id="shang-chuan-heic-heif-ge-shi-de-tu-pian-hou-wu-fa-zhan-shi" tabindex="-1">上传 HEIC/HEIF 格式的图片后无法展示？</h3>\n<p>目前 Chrome、Safari 等浏览器不支持展示 HEIC/HEIF 格式的图片，因此上传后无法在 Uploader 组件中进行预览。</p>\n<p>[HEIF] 格式的兼容性请参考 <a href="https://caniuse.com/?search=heic" target="_blank">caniuse</a>。</p>\n</div><div class="mi-doc-card"><h3 id="ru-he-pan-duan-yong-hu-shou-yu-liao-she-xiang-tou-quan-xian" tabindex="-1">如何判断用户授予了摄像头权限？</h3>\n<p>在上传图片时，如果用户没有授予当前 App 摄像头权限，会导致 Uploader 组件无法使用。</p>\n<p>你可以通过浏览器提供的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getUserMedia" target="_blank">getUserMedia</a> 方法来判断是否被授予了摄像头权限（请留意 <code>getUserMedia</code> 方法无法在 iOS 10 中使用）。</p>\n<p>以下是一个简化的示例：</p>\n<pre><code class="language-ts">navigator.<span class="hljs-property">mediaDevices</span>\n    .<span class="hljs-title function_">getUserMedia</span>({ <span class="hljs-attr">video</span>: <span class="hljs-literal">true</span> })\n    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">stream</span>) =&gt;</span> {\n        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stream);\n    })\n    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {\n        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);\n    });\n</code></pre>\n</div>'},null,8,e))}}}]);