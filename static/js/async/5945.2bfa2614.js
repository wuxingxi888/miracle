"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["5945"],{9591:function(n,s,t){t.r(s),t.d(s,{default:function(){return d}});var a=t(1147);let e=["innerHTML"],d={setup:()=>({html:""}),render:()=>((0,a.wg)(),(0,a.iD)("div",{class:"mi-doc-markdown-body",innerHTML:'<h1>Stepper 步进器</h1>\n<div class="mi-doc-card"><h3 id="jie-shao" tabindex="-1">介绍</h3>\n<p>步进器由增加按钮、减少按钮和输入框组成，用于在一定范围内输入、调整数字。</p>\n</div><div class="mi-doc-card"><h3 id="yin-ru" tabindex="-1">引入</h3>\n<p>通过以下方式来全局注册组件，更多注册方式请参考<a href="#/zh-CN/advanced-usage#zu-jian-zhu-ce" target="_blank">组件注册</a>。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Stepper</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>();\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Stepper</span>);\n</code></pre>\n</div><h2 id="dai-ma-yan-shi" tabindex="-1">代码演示</h2>\n<div class="mi-doc-card"><h3 id="ji-chu-yong-fa" tabindex="-1">基础用法</h3>\n<p>通过 <code>v-model</code> 绑定输入值，可以通过 <code>change</code> 事件监听到输入值的变化。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> value = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>);\n        <span class="hljs-keyword">return</span> { value };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="bu-chang-she-zhi" tabindex="-1">步长设置</h3>\n<p>通过 <code>step</code> 属性设置每次点击增加或减少按钮时变化的值，默认为 <code>1</code>。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;2&quot;</span> /&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="xian-zhi-shu-ru-fan-wei" tabindex="-1">限制输入范围</h3>\n<p>通过 <code>min</code> 和 <code>max</code> 属性限制输入值的范围，默认超出范围后会自动校正最大值或最小值，通过 <code>auto-fixed</code> 可以关闭自动校正。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;8&quot;</span> /&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="xian-zhi-shu-ru-zheng-shu" tabindex="-1">限制输入整数</h3>\n<p>设置 <code>integer</code> 属性后，输入框将限制只能输入整数。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">integer</span> /&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="jin-yong-zhuang-tai" tabindex="-1">禁用状态</h3>\n<p>通过设置 <code>disabled</code> 属性来禁用步进器，禁用状态下无法点击按钮或修改输入框。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">disabled</span> /&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="jin-yong-shu-ru-kuang" tabindex="-1">禁用输入框</h3>\n<p>通过设置 <code>disable-input</code> 属性来禁用输入框，此时按钮仍然可以点击。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">disable-input</span> /&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="gu-ding-xiao-shu-wei-shu" tabindex="-1">固定小数位数</h3>\n<p>通过设置 <code>decimal-length</code> 属性可以保留固定的小数位数。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;0.2&quot;</span> <span class="hljs-attr">:decimal-length</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="zi-ding-yi-da-xiao" tabindex="-1">自定义大小</h3>\n<p>通过 <code>input-width</code> 属性设置输入框宽度，通过 <code>button-size</code> 属性设置按钮大小和输入框高度。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">input-width</span>=<span class="hljs-string">&quot;40px&quot;</span> <span class="hljs-attr">button-size</span>=<span class="hljs-string">&quot;32px&quot;</span> /&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="yi-bu-bian-geng" tabindex="-1">异步变更</h3>\n<p>通过 <code>before-change</code> 属性可以在输入值变化前进行校验和拦截。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">:before-change</span>=<span class="hljs-string">&quot;beforeChange&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { closeToast, showLoadingToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> value = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>);\n\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">beforeChange</span> = (<span class="hljs-params">value</span>) =&gt; {\n            <span class="hljs-title function_">showLoadingToast</span>({ <span class="hljs-attr">forbidClick</span>: <span class="hljs-literal">true</span> });\n\n            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {\n                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n                    <span class="hljs-title function_">closeToast</span>();\n                    <span class="hljs-comment">// 在 resolve 函数中返回 true 或 false</span>\n                    <span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>);\n                }, <span class="hljs-number">500</span>);\n            });\n        };\n\n        <span class="hljs-keyword">return</span> {\n            value,\n            beforeChange,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="yuan-jiao-feng-ge" tabindex="-1">圆角风格</h3>\n<p>将 <code>theme</code> 设置为 <code>round</code> 来展示圆角风格的步进器。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">button-size</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">disable-input</span> /&gt;</span>\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="mi-doc-card"><h3 id="props" tabindex="-1">Props</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v-model</td>\n<td>当前输入的值</td>\n<td><em>number | string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n<td><em>number | string</em></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n<td><em>number | string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>auto-fixed</td>\n<td>是否自动校正超出限制范围的数值，设置为 <code>false</code> 后输入超过限制范围的数值将不会自动校正</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>default-value</td>\n<td>初始值，当 v-model 为空时生效</td>\n<td><em>number | string</em></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td>step</td>\n<td>步长，每次点击时改变的值</td>\n<td><em>number | string</em></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td>name</td>\n<td>标识符，通常为一个唯一的字符串或数字，可以在 <code>change</code> 事件回调参数中获取</td>\n<td><em>number | string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>input-width</td>\n<td>输入框宽度，默认单位为 <code>px</code></td>\n<td><em>number | string</em></td>\n<td><code>32px</code></td>\n</tr>\n<tr>\n<td>button-size</td>\n<td>按钮大小以及输入框高度，默认单位为 <code>px</code></td>\n<td><em>number | string</em></td>\n<td><code>28px</code></td>\n</tr>\n<tr>\n<td>decimal-length</td>\n<td>固定显示的小数位数</td>\n<td><em>number | string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>样式风格，可选值为 <code>round</code></td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>输入框占位提示文字</td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>integer</td>\n<td>是否只允许输入整数</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用步进器</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>disable-plus</td>\n<td>是否禁用增加按钮</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>disable-minus</td>\n<td>是否禁用减少按钮</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>disable-input</td>\n<td>是否禁用输入框</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>before-change</td>\n<td>输入值变化前的回调函数，返回 <code>false</code> 可阻止输入，支持返回 Promise</td>\n<td><em>(value: number | string) =&gt; boolean | Promise&lt;boolean&gt;</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>show-plus</td>\n<td>是否显示增加按钮</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>show-minus</td>\n<td>是否显示减少按钮</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>show-input</td>\n<td>是否显示输入框</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>long-press</td>\n<td>是否开启长按手势，开启后可以长按增加和减少按钮</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>allow-empty</td>\n<td>是否允许输入的值为空，设置为 <code>true</code> 后允许传入空字符串</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="events" tabindex="-1">Events</h3>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>说明</th>\n<th>回调参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>change</td>\n<td>当绑定值变化时触发的事件</td>\n<td><em>value: string, detail: { name: string }</em></td>\n</tr>\n<tr>\n<td>overlimit</td>\n<td>点击不可用的按钮时触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>plus</td>\n<td>点击增加按钮时触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>minus</td>\n<td>点击减少按钮时触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>focus</td>\n<td>输入框聚焦时触发</td>\n<td><em>event: Event</em></td>\n</tr>\n<tr>\n<td>blur</td>\n<td>输入框失焦时触发</td>\n<td><em>event: Event</em></td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="lei-xing-ding-yi" tabindex="-1">类型定义</h3>\n<p>组件导出以下类型定义：</p>\n<pre><code class="language-ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">StepperTheme</span>, <span class="hljs-title class_">StepperProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n</code></pre>\n</div><h2 id="zhu-ti-ding-zhi" tabindex="-1">主题定制</h2>\n<div class="mi-doc-card"><h3 id="yang-shi-bian-liang" tabindex="-1">样式变量</h3>\n<p>组件提供了下列 CSS 变量，可用于自定义样式，使用方法请参考 <a href="#/zh-CN/config-provider" target="_blank">ConfigProvider 组件</a>。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--mi-stepper-background</td>\n<td><em>var(--mi-active-color)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-button-icon-color</td>\n<td><em>var(--mi-text-color)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-button-disabled-color</td>\n<td><em>var(--mi-background)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-button-disabled-icon-color</td>\n<td><em>var(--mi-gray-5)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-button-round-theme-color</td>\n<td><em>var(--mi-primary-color)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-input-width</td>\n<td><em>32px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-input-height</td>\n<td><em>28px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-input-font-size</td>\n<td><em>var(--mi-font-size-md)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-input-line-height</td>\n<td><em>normal</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-input-text-color</td>\n<td><em>var(--mi-text-color)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-input-disabled-text-color</td>\n<td><em>var(--mi-text-color-3)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-input-disabled-background</td>\n<td><em>var(--mi-active-color)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-stepper-radius</td>\n<td><em>var(--mi-radius-md)</em></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><h2 id="chang-jian-wen-ti" tabindex="-1">常见问题</h2>\n<div class="mi-doc-card"><h3 id="wei-shi-me-value-you-shi-hou-hui-bian-cheng-string-lei-xing" tabindex="-1">为什么 value 有时候会变成 string 类型？</h3>\n<p>这是因为用户输入过程中可能出现小数点或空值，比如 <code>1.</code>，这种情况下组件会抛出字符串类型。</p>\n<p>如果希望 value 保持 number 类型，可以在 v-model 上添加 <code>number</code> 修饰符：</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-stepper</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span>\n</code></pre>\n</div>'},null,8,e))}}}]);