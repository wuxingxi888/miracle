"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["8686"],{6814:function(s,n,t){t.r(n),t.d(n,{default:function(){return p}});var a=t(1147);let l=["innerHTML"],p={setup:()=>({html:""}),render:()=>((0,a.wg)(),(0,a.iD)("div",{class:"mi-doc-markdown-body",innerHTML:'<h1>Popup 弹出层</h1>\n<div class="mi-doc-card"><h3 id="jie-shao" tabindex="-1">介绍</h3>\n<p>弹出层容器，用于展示弹窗、信息提示等内容，支持多个弹出层叠加展示。</p>\n</div><div class="mi-doc-card"><h3 id="yin-ru" tabindex="-1">引入</h3>\n<p>通过以下方式来全局注册组件，更多注册方式请参考<a href="#/zh-CN/advanced-usage#zu-jian-zhu-ce" target="_blank">组件注册</a>。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Popup</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>();\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Popup</span>);\n</code></pre>\n</div><h2 id="dai-ma-yan-shi" tabindex="-1">代码演示</h2>\n<div class="mi-doc-card"><h3 id="ji-chu-yong-fa" tabindex="-1">基础用法</h3>\n<p>通过 <code>v-model:show</code> 控制弹出层是否展示。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-cell</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;展示弹出层&quot;</span> <span class="hljs-attr">is-link</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showPopup&quot;</span> /&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ padding: &#x27;64px&#x27; }&quot;</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">mi-popup</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> show = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">showPopup</span> = (<span class="hljs-params"></span>) =&gt; {\n            show.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;\n        };\n        <span class="hljs-keyword">return</span> {\n            show,\n            showPopup,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="dan-chu-wei-zhi" tabindex="-1">弹出位置</h3>\n<p>通过 <code>position</code> 属性设置弹窗的弹出位置，默认为居中弹出，可以设置为 <code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>。</p>\n<ul>\n<li>当弹窗从顶部或底部弹出时，默认宽度与屏幕宽度保持一致，弹窗高度取决于内容的高度。</li>\n<li>当弹窗从左侧或右侧弹出时，默认不设置宽度和高度，弹窗的宽高取决于内容的宽高。</li>\n</ul>\n<pre><code class="language-html"><span class="hljs-comment">&lt;!-- 顶部弹出 --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;showTop&quot;</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ height: &#x27;30%&#x27; }&quot;</span> /&gt;</span>\n\n<span class="hljs-comment">&lt;!-- 底部弹出 --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span>\n    <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;showBottom&quot;</span>\n    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;bottom&quot;</span>\n    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ height: &#x27;30%&#x27; }&quot;</span>\n/&gt;</span>\n\n<span class="hljs-comment">&lt;!-- 左侧弹出 --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span>\n    <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;showLeft&quot;</span>\n    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;left&quot;</span>\n    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ width: &#x27;30%&#x27;, height: &#x27;100%&#x27; }&quot;</span>\n/&gt;</span>\n\n<span class="hljs-comment">&lt;!-- 右侧弹出 --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span>\n    <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;showRight&quot;</span>\n    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;right&quot;</span>\n    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ width: &#x27;30%&#x27;, height: &#x27;100%&#x27; }&quot;</span>\n/&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="guan-bi-tu-biao" tabindex="-1">关闭图标</h3>\n<p>设置 <code>closeable</code> 属性后，会在弹出层的右上角显示关闭图标，并且可以通过 <code>close-icon</code> 属性自定义图标，使用 <code>close-icon-position</code> 属性可以自定义图标位置。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span>\n    <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;show&quot;</span>\n    <span class="hljs-attr">closeable</span>\n    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;bottom&quot;</span>\n    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ height: &#x27;30%&#x27; }&quot;</span>\n/&gt;</span>\n<span class="hljs-comment">&lt;!-- 自定义图标 --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span>\n    <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;show&quot;</span>\n    <span class="hljs-attr">closeable</span>\n    <span class="hljs-attr">close-icon</span>=<span class="hljs-string">&quot;close&quot;</span>\n    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;bottom&quot;</span>\n    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ height: &#x27;30%&#x27; }&quot;</span>\n/&gt;</span>\n<span class="hljs-comment">&lt;!-- 图标位置 --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span>\n    <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;show&quot;</span>\n    <span class="hljs-attr">closeable</span>\n    <span class="hljs-attr">close-icon-position</span>=<span class="hljs-string">&quot;top-left&quot;</span>\n    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;bottom&quot;</span>\n    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ height: &#x27;30%&#x27; }&quot;</span>\n/&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="yuan-jiao-dan-chuang" tabindex="-1">圆角弹窗</h3>\n<p>设置 <code>round</code> 属性后，弹窗会根据弹出位置添加不同的圆角样式。</p>\n<pre><code class="language-html"><span class="hljs-comment">&lt;!-- 圆角弹窗（居中） --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;showCenter&quot;</span> <span class="hljs-attr">round</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ padding: &#x27;64px&#x27; }&quot;</span> /&gt;</span>\n\n<span class="hljs-comment">&lt;!-- 圆角弹窗（底部） --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span>\n    <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;showBottom&quot;</span>\n    <span class="hljs-attr">round</span>\n    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;bottom&quot;</span>\n    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ height: &#x27;30%&#x27; }&quot;</span>\n/&gt;</span>\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="jian-ting-dian-ji-shi-jian" tabindex="-1">监听点击事件</h3>\n<p>Popup 支持以下点击事件：</p>\n<ul>\n<li><code>click</code>: 点击弹出层时触发。</li>\n<li><code>click-overlay</code>: 点击遮罩层时触发。</li>\n<li><code>click-close-icon</code>: 点击关闭图标时触发。</li>\n</ul>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-cell</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;监听点击事件&quot;</span> <span class="hljs-attr">is-link</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = true&quot;</span> /&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span>\n    <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;show&quot;</span>\n    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;bottom&quot;</span>\n    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ height: &#x27;30%&#x27; }&quot;</span>\n    <span class="hljs-attr">closeable</span>\n    @<span class="hljs-attr">click-overlay</span>=<span class="hljs-string">&quot;onClickOverlay&quot;</span>\n    @<span class="hljs-attr">click-close-icon</span>=<span class="hljs-string">&quot;onClickCloseIcon&quot;</span>\n/&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { showToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> show = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">onClickOverlay</span> = (<span class="hljs-params"></span>) =&gt; {\n            <span class="hljs-title function_">showToast</span>(<span class="hljs-string">&#x27;click-overlay&#x27;</span>);\n        };\n        <span class="hljs-keyword">const</span> <span class="hljs-title function_">onClickCloseIcon</span> = (<span class="hljs-params"></span>) =&gt; {\n            <span class="hljs-title function_">showToast</span>(<span class="hljs-string">&#x27;click-close-icon&#x27;</span>);\n        };\n        <span class="hljs-keyword">return</span> {\n            show,\n            onClickOverlay,\n            onClickCloseIcon,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="jian-ting-xian-shi-shi-jian" tabindex="-1">监听显示事件</h3>\n<p>当 Popup 被打开或关闭时，会触发以下事件：</p>\n<ul>\n<li><code>open</code>: 打开弹出层时立即触发。</li>\n<li><code>opened</code>: 打开弹出层且动画结束后触发。</li>\n<li><code>close</code>: 关闭弹出层时立即触发。</li>\n<li><code>closed</code>: 关闭弹出层且动画结束后触发。</li>\n</ul>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-cell</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;监听显示事件&quot;</span> <span class="hljs-attr">is-link</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;show = true&quot;</span> /&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span>\n    <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;show&quot;</span>\n    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;bottom&quot;</span>\n    <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;{ height: &#x27;30%&#x27; }&quot;</span>\n    @<span class="hljs-attr">open</span>=<span class="hljs-string">&quot;showToast(&#x27;open&#x27;)&quot;</span>\n    @<span class="hljs-attr">opened</span>=<span class="hljs-string">&quot;showToast(&#x27;opened&#x27;)&quot;</span>\n    @<span class="hljs-attr">close</span>=<span class="hljs-string">&quot;showToast(&#x27;close&#x27;)&quot;</span>\n    @<span class="hljs-attr">closed</span>=<span class="hljs-string">&quot;showToast(&#x27;closed&#x27;)&quot;</span>\n/&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { showToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> show = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n        <span class="hljs-keyword">return</span> {\n            show,\n            showToast,\n        };\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="zhi-ding-gua-zai-wei-zhi" tabindex="-1">指定挂载位置</h3>\n<p>弹出层默认挂载到组件标签所在位置，可以通过 <code>teleport</code> 属性指定挂载位置。</p>\n<pre><code class="language-html"><span class="hljs-comment">&lt;!-- 挂载到 body 节点下 --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">teleport</span>=<span class="hljs-string">&quot;body&quot;</span> /&gt;</span>\n\n<span class="hljs-comment">&lt;!-- 挂载到 #app 节点下 --&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">mi-popup</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">teleport</span>=<span class="hljs-string">&quot;#app&quot;</span> /&gt;</span>\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="mi-doc-card"><h3 id="props" tabindex="-1">Props</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v-model:show</td>\n<td>是否显示弹出层</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>overlay</td>\n<td>是否显示遮罩层</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>position</td>\n<td>弹出位置，可选值为 <code>top</code> <code>bottom</code> <code>right</code> <code>left</code></td>\n<td><em>string</em></td>\n<td><code>center</code></td>\n</tr>\n<tr>\n<td>overlay-class</td>\n<td>自定义遮罩层类名</td>\n<td><em>string | Array | object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>overlay-style</td>\n<td>自定义遮罩层样式</td>\n<td><em>object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>duration</td>\n<td>动画时长，单位秒，设置为 0 可以禁用动画</td>\n<td><em>number | string</em></td>\n<td><code>0.3</code></td>\n</tr>\n<tr>\n<td>z-index</td>\n<td>将弹窗的 z-index 层级设置为一个固定值</td>\n<td><em>number | string</em></td>\n<td><code>2000+</code></td>\n</tr>\n<tr>\n<td>round</td>\n<td>是否显示圆角</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>lock-scroll</td>\n<td>是否锁定背景滚动</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>lazy-render</td>\n<td>是否在显示弹层时才渲染节点</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>close-on-popstate</td>\n<td>是否在页面回退时自动关闭</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>close-on-click-overlay</td>\n<td>是否在点击遮罩层后关闭</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>closeable</td>\n<td>是否显示关闭图标</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>close-icon</td>\n<td>关闭图标名称或图片链接，等同于 Icon 组件的 <a href="#/zh-CN/icon#props" target="_blank">name 属性</a></td>\n<td><em>string</em></td>\n<td><code>cross</code></td>\n</tr>\n<tr>\n<td>close-icon-position</td>\n<td>关闭图标位置，可选值为 <code>top-left</code><br><code>bottom-left</code> <code>bottom-right</code></td>\n<td><em>string</em></td>\n<td><code>top-right</code></td>\n</tr>\n<tr>\n<td>before-close</td>\n<td>关闭前的回调函数，返回 <code>false</code> 可阻止关闭，支持返回 Promise</td>\n<td><em>(action: string) =&gt; boolean | Promise&lt;boolean&gt;</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>icon-prefix</td>\n<td>图标类名前缀，等同于 Icon 组件的 <a href="#/zh-CN/icon#props" target="_blank">class-prefix 属性</a></td>\n<td><em>string</em></td>\n<td><code>mi-icon</code></td>\n</tr>\n<tr>\n<td>transition</td>\n<td>动画类名，等价于 <a href="https://cn.vuejs.org/api/built-in-components.html#transition" target="_blank">transition</a> 的 <code>name</code> 属性</td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>transition-appear</td>\n<td>是否在初始渲染时启用过渡动画</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>teleport</td>\n<td>指定挂载的节点，等同于 Teleport 组件的 <a href="https://cn.vuejs.org/api/built-in-components.html#teleport" target="_blank">to 属性</a></td>\n<td><em>string | Element</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>safe-area-inset-top</td>\n<td>是否开启<a href="#/zh-CN/advanced-usage#di-bu-an-quan-qu-gua-pei" target="_blank">顶部安全区适配</a></td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>safe-area-inset-bottom</td>\n<td>是否开启<a href="#/zh-CN/advanced-usage#di-bu-an-quan-qu-gua-pei" target="_blank">底部安全区适配</a></td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="events" tabindex="-1">Events</h3>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>说明</th>\n<th>回调参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>click</td>\n<td>点击弹出层时触发</td>\n<td><em>event: MouseEvent</em></td>\n</tr>\n<tr>\n<td>click-overlay</td>\n<td>点击遮罩层时触发</td>\n<td><em>event: MouseEvent</em></td>\n</tr>\n<tr>\n<td>click-close-icon</td>\n<td>点击关闭图标时触发</td>\n<td><em>event: MouseEvent</em></td>\n</tr>\n<tr>\n<td>open</td>\n<td>打开弹出层时立即触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>close</td>\n<td>关闭弹出层时立即触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>opened</td>\n<td>打开弹出层且动画结束后触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>closed</td>\n<td>关闭弹出层且动画结束后触发</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="slots" tabindex="-1">Slots</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default</td>\n<td>弹窗内容</td>\n</tr>\n<tr>\n<td>overlay-content</td>\n<td>遮罩层的内容</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="lei-xing-ding-yi" tabindex="-1">类型定义</h3>\n<p>组件导出以下类型定义：</p>\n<pre><code class="language-ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> {\n    <span class="hljs-title class_">PopupProps</span>,\n    <span class="hljs-title class_">PopupPosition</span>,\n    <span class="hljs-title class_">PopupInstance</span>,\n    <span class="hljs-title class_">PopupCloseIconPosition</span>,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n</code></pre>\n</div><h2 id="zhu-ti-ding-zhi" tabindex="-1">主题定制</h2>\n<div class="mi-doc-card"><h3 id="yang-shi-bian-liang" tabindex="-1">样式变量</h3>\n<p>组件提供了下列 CSS 变量，可用于自定义样式，使用方法请参考 <a href="#/zh-CN/config-provider" target="_blank">ConfigProvider 组件</a>。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--mi-popup-background</td>\n<td><em>var(--mi-background-2)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-popup-transition</td>\n<td><em>transform var(--mi-duration-base)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-popup-round-radius</td>\n<td><em>16px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-popup-close-icon-size</td>\n<td><em>22px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-popup-close-icon-color</td>\n<td><em>var(--mi-gray-5)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-popup-close-icon-margin</td>\n<td><em>16px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-popup-close-icon-z-index</td>\n<td><em>1</em></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div>'},null,8,l))}}}]);