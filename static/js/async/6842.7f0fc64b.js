"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["6842"],{3419:function(s,n,a){a.r(n),a.d(n,{default:function(){return l}});var t=a(1147);let e=["innerHTML"],l={setup:()=>({html:""}),render:()=>((0,t.wg)(),(0,t.iD)("div",{class:"mi-doc-markdown-body",innerHTML:'<h1>useEventListener</h1>\n<div class="mi-doc-card"><h3 id="jie-shao" tabindex="-1">介绍</h3>\n<p>方便地进行事件绑定，在组件 <code>mounted</code> 和 <code>activated</code> 时绑定事件，<code>unmounted</code> 和 <code>deactivated</code> 时解绑事件。</p>\n</div><h2 id="dai-ma-yan-shi" tabindex="-1">代码演示</h2>\n<div class="mi-doc-card"><h3 id="ji-ben-yong-fa" tabindex="-1">基本用法</h3>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { useEventListener } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/use&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-comment">// 在 window 上绑定 resize 事件</span>\n        <span class="hljs-comment">// 未指定监听对象时，默认会监听 window 的事件</span>\n        <span class="hljs-title function_">useEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;window resize&#x27;</span>);\n        });\n\n        <span class="hljs-comment">// 在 body 元素上绑定 click 事件</span>\n        <span class="hljs-title function_">useEventListener</span>(\n            <span class="hljs-string">&#x27;click&#x27;</span>,\n            <span class="hljs-function">() =&gt;</span> {\n                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;click body&#x27;</span>);\n            },\n            { <span class="hljs-attr">target</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span> },\n        );\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="qu-xiao-shi-jian-jian-ting" tabindex="-1">取消事件监听</h3>\n<p><code>useEventListener</code> 会返回一个 <code>cleanup</code> 函数，调用该函数可以取消事件监听。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { useEventListener } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/use&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> cleanup = <span class="hljs-title function_">useEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;window resize&#x27;</span>);\n        });\n\n        <span class="hljs-title function_">cleanup</span>();\n    },\n};\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="mi-doc-card"><h3 id="lei-xing-ding-yi" tabindex="-1">类型定义</h3>\n<pre><code class="language-ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Options</span> = {\n    target?: <span class="hljs-title class_">EventTarget</span> | <span class="hljs-title class_">Ref</span>&lt;<span class="hljs-title class_">EventTarget</span>&gt;;\n    capture?: <span class="hljs-built_in">boolean</span>;\n    passive?: <span class="hljs-built_in">boolean</span>;\n};\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">useEventListener</span>(<span class="hljs-params">\n    <span class="hljs-attr">type</span>: <span class="hljs-built_in">string</span>,\n    <span class="hljs-attr">listener</span>: <span class="hljs-title class_">EventListener</span>,\n    options?: <span class="hljs-title class_">Options</span>,\n</span>): <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="can-shu" tabindex="-1">参数</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>监听的事件类型</td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>listener</td>\n<td>事件回调函数</td>\n<td><em>EventListener</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>options</td>\n<td>可选的配置项</td>\n<td><em>Options</em></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="options" tabindex="-1">Options</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>target</td>\n<td>绑定事件的元素</td>\n<td><em>EventTarget | Ref&lt;EventTarget&gt;</em></td>\n<td><code>window</code></td>\n</tr>\n<tr>\n<td>capture</td>\n<td>是否在事件捕获阶段触发</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>passive</td>\n<td>设置为 <code>true</code> 时，表示 <code>listener</code> 永远不会调用 <code>preventDefault</code></td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>'},null,8,e))}}}]);