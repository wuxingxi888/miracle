"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["5370"],{1212:function(s,n,a){a.r(n),a.d(n,{default:function(){return e}});var l=a(1147);let t=["innerHTML"],e={setup:()=>({html:""}),render:()=>((0,l.wg)(),(0,l.iD)("div",{class:"mi-doc-markdown-body",innerHTML:'<h1>useRaf</h1>\n<div class="mi-doc-card"><h3 id="jie-shao" tabindex="-1">介绍</h3>\n<p>提供便捷的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/window/requestAnimationFrame" target="_blank">requestAnimationFrame</a> 的调用和取消。</p>\n</div><h2 id="dai-ma-yan-shi" tabindex="-1">代码演示</h2>\n<div class="mi-doc-card"><h3 id="dan-ci-diao-yong" tabindex="-1">单次调用</h3>\n<p>通过 <code>useRaf</code> 方法，可以在下一次浏览器重新绘制之前调用指定的函数。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { useRaf } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/use&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;\n        <span class="hljs-title function_">useRaf</span>(<span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(++count); <span class="hljs-comment">// 只会执行 1 次</span>\n        });\n    },\n};\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="xun-huan-diao-yong" tabindex="-1">循环调用</h3>\n<p>通过开启 <code>isLoop</code> 选项，你可以按指定的间隔重复执行某个函数，直到被取消。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { useRaf } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/use&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;\n        <span class="hljs-keyword">const</span> cancelRaf = <span class="hljs-title function_">useRaf</span>(\n            <span class="hljs-function">() =&gt;</span> {\n                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(++count); <span class="hljs-comment">// 无限执行，直到被 cancel</span>\n\n                <span class="hljs-keyword">if</span> (count === <span class="hljs-number">5</span>) {\n                    <span class="hljs-title function_">cancelRaf</span>();\n                }\n            },\n            {\n                <span class="hljs-attr">isLoop</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启循环</span>\n                <span class="hljs-attr">interval</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">// 设置调用间隔</span>\n            },\n        );\n    },\n};\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="mi-doc-card"><h3 id="lei-xing-ding-yi" tabindex="-1">类型定义</h3>\n<pre><code class="language-ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">useRaf</span>(<span class="hljs-params">\n    <span class="hljs-attr">callback</span>: () =&gt; <span class="hljs-built_in">void</span>,\n    <span class="hljs-attr">options</span>: {\n        interval?: <span class="hljs-built_in">number</span>;\n        isLoop?: <span class="hljs-built_in">boolean</span>;\n    },\n</span>): <span class="hljs-built_in">void</span>;\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="can-shu" tabindex="-1">参数</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>callback</td>\n<td>回调函数</td>\n<td><em>() =&gt; void</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>options</td>\n<td>配置参数</td>\n<td><em>{ interval?: number; isLoop?: boolean }</em></td>\n<td><em>{ interval: 0; isLoop: false }</em></td>\n</tr>\n</tbody>\n</table>\n</div>'},null,8,t))}}}]);