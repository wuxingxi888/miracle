"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["3003"],{539:function(s,n,t){t.r(n),t.d(n,{default:function(){return e}});var a=t(1147);let d=["innerHTML"],e={setup:()=>({html:""}),render:()=>((0,a.wg)(),(0,a.iD)("div",{class:"mi-doc-markdown-body",innerHTML:'<h1>Toast 轻提示</h1>\n<div class="mi-doc-card"><h3 id="jie-shao" tabindex="-1">介绍</h3>\n<p>在页面中间弹出黑色半透明提示，用于消息通知、加载提示、操作结果提示等场景。</p>\n</div><div class="mi-doc-card"><h3 id="yin-ru" tabindex="-1">引入</h3>\n<p>通过以下方式来全局注册组件，更多注册方式请参考<a href="#/zh-CN/advanced-usage#zu-jian-zhu-ce" target="_blank">组件注册</a>。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Toast</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>();\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Toast</span>);\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="han-shu-diao-yong" tabindex="-1">函数调用</h3>\n<p>为了便于使用 <code>Toast</code>，Miracle 提供了一系列辅助函数，通过辅助函数可以快速唤起全局的 Toast 组件。</p>\n<p>比如使用 <code>showToast</code> 函数，调用后会直接在页面中渲染对应的轻提示。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showToast</span>(<span class="hljs-string">&#x27;提示内容&#x27;</span>);\n</code></pre>\n</div><h2 id="dai-ma-yan-shi" tabindex="-1">代码演示</h2>\n<div class="mi-doc-card"><h3 id="wen-zi-ti-shi" tabindex="-1">文字提示</h3>\n<p>使用 <code>showToast</code> 方法在屏幕中间展示一条文字提示。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showToast</span>(<span class="hljs-string">&#x27;提示内容&#x27;</span>);\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="jia-zai-ti-shi" tabindex="-1">加载提示</h3>\n<p>使用 <code>showLoadingToast</code> 方法展示加载提示，通过 <code>forbidClick</code> 选项可以禁用背景点击。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showLoadingToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showLoadingToast</span>({\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;加载中...&#x27;</span>,\n    <span class="hljs-attr">forbidClick</span>: <span class="hljs-literal">true</span>,\n});\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="cheng-gong-shi-bai-ti-shi" tabindex="-1">成功/失败提示</h3>\n<p>使用 <code>showSuccessToast</code> 方法展示成功提示，使用 <code>showFailToast</code> 方法展示失败提示。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showSuccessToast, showFailToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showSuccessToast</span>(<span class="hljs-string">&#x27;成功文案&#x27;</span>);\n<span class="hljs-title function_">showFailToast</span>(<span class="hljs-string">&#x27;失败文案&#x27;</span>);\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="zi-ding-yi-tu-biao" tabindex="-1">自定义图标</h3>\n<p>通过 <code>icon</code> 选项可以自定义图标，支持传入图标名称或图片链接，等同于 Icon 组件的 <a href="#/zh-CN/icon#props" target="_blank">name 属性</a>。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showToast</span>({\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;自定义图标&#x27;</span>,\n    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;like-o&#x27;</span>,\n});\n\n<span class="hljs-title function_">showToast</span>({\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;自定义图片&#x27;</span>,\n    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;https://cdn.jsdelivr.net/gh/wuxingxi888/CDN_IMG_BED/logo.png&#x27;</span>,\n});\n</code></pre>\n<p>通过 <code>loadingType</code> 属性可以自定义加载图标类型。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showLoadingToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showLoadingToast</span>({\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;加载中...&#x27;</span>,\n    <span class="hljs-attr">forbidClick</span>: <span class="hljs-literal">true</span>,\n    <span class="hljs-attr">loadingType</span>: <span class="hljs-string">&#x27;spinner&#x27;</span>,\n});\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="zi-ding-yi-wei-zhi" tabindex="-1">自定义位置</h3>\n<p>Toast 默认渲染在屏幕正中位置，通过 <code>position</code> 属性可以控制 Toast 展示的位置。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showToast</span>({\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;顶部展示&#x27;</span>,\n    <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;top&#x27;</span>,\n});\n\n<span class="hljs-title function_">showToast</span>({\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;底部展示&#x27;</span>,\n    <span class="hljs-attr">position</span>: <span class="hljs-string">&#x27;bottom&#x27;</span>,\n});\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="wen-zi-huan-xing-fang-shi" tabindex="-1">文字换行方式</h3>\n<p>通过 <code>wordBreak</code> 选项可以控制 Toast 中的文字过长时的截断方式，默认值为 <code>break-all</code>，可选值为 <code>break-word</code> 和 <code>normal</code>。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-comment">// 换行时截断单词</span>\n<span class="hljs-title function_">showToast</span>({\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;This message will contain a incomprehensibilities long word.&#x27;</span>,\n    <span class="hljs-attr">wordBreak</span>: <span class="hljs-string">&#x27;break-all&#x27;</span>,\n});\n\n<span class="hljs-comment">// 换行时不截断单词</span>\n<span class="hljs-title function_">showToast</span>({\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;This message will contain a incomprehensibilities long word.&#x27;</span>,\n    <span class="hljs-attr">wordBreak</span>: <span class="hljs-string">&#x27;break-word&#x27;</span>,\n});\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="dong-tai-geng-xin-ti-shi" tabindex="-1">动态更新提示</h3>\n<p>执行 Toast 方法时会返回对应的 Toast 实例，通过修改实例上的 <code>message</code> 属性可以实现动态更新提示的效果。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showLoadingToast, closeToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">const</span> toast = <span class="hljs-title function_">showLoadingToast</span>({\n    <span class="hljs-attr">duration</span>: <span class="hljs-number">0</span>,\n    <span class="hljs-attr">forbidClick</span>: <span class="hljs-literal">true</span>,\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;倒计时 3 秒&#x27;</span>,\n});\n\n<span class="hljs-keyword">let</span> second = <span class="hljs-number">3</span>;\n<span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {\n    second--;\n    <span class="hljs-keyword">if</span> (second) {\n        toast.<span class="hljs-property">message</span> = <span class="hljs-string">`倒计时 <span class="hljs-subst">${second}</span> 秒`</span>;\n    } <span class="hljs-keyword">else</span> {\n        <span class="hljs-built_in">clearInterval</span>(timer);\n        <span class="hljs-title function_">closeToast</span>();\n    }\n}, <span class="hljs-number">1000</span>);\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="dan-li-mo-shi" tabindex="-1">单例模式</h3>\n<p>Toast 默认采用单例模式，即同一时间只会存在一个 Toast，如果需要在同一时间弹出多个 Toast，可以参考下面的示例：</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> {\n    showToast,\n    showSuccessToast,\n    allowMultipleToast,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">allowMultipleToast</span>();\n\n<span class="hljs-keyword">const</span> toast1 = <span class="hljs-title function_">showToast</span>(<span class="hljs-string">&#x27;第一个 Toast&#x27;</span>);\n<span class="hljs-keyword">const</span> toast2 = <span class="hljs-title function_">showSuccessToast</span>(<span class="hljs-string">&#x27;第二个 Toast&#x27;</span>);\n\ntoast1.<span class="hljs-title function_">close</span>();\ntoast2.<span class="hljs-title function_">close</span>();\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="xiu-gai-mo-ren-pei-zhi" tabindex="-1">修改默认配置</h3>\n<p>通过 <code>setToastDefaultOptions</code> 函数可以全局修改 <code>showToast</code> 等方法的默认配置。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> {\n    setToastDefaultOptions,\n    resetToastDefaultOptions,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">setToastDefaultOptions</span>({ <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span> });\n\n<span class="hljs-title function_">setToastDefaultOptions</span>(<span class="hljs-string">&#x27;loading&#x27;</span>, { <span class="hljs-attr">forbidClick</span>: <span class="hljs-literal">true</span> });\n\n<span class="hljs-title function_">resetToastDefaultOptions</span>();\n\n<span class="hljs-title function_">resetToastDefaultOptions</span>(<span class="hljs-string">&#x27;loading&#x27;</span>);\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="shi-yong-toast-zu-jian" tabindex="-1">使用 Toast 组件</h3>\n<p>如果你需要在 Toast 内嵌入组件或其他自定义内容，可以直接使用 Toast 组件，并使用 message 插槽进行定制。使用前需要通过 <code>app.use</code> 等方式注册组件。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-toast</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding: 0&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">message</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">mi-image</span>\n            <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;image&quot;</span>\n            <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span>\n            <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;140&quot;</span>\n            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block&quot;</span>\n        /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mi-toast</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> show = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n        <span class="hljs-keyword">return</span> { show };\n    },\n};\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="mi-doc-card"><h3 id="fang-fa" tabindex="-1">方法</h3>\n<p>Miracle 中导出了以下 Toast 相关的辅助函数：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>参数</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>showToast</td>\n<td>展示文字提示</td>\n<td><code>ToastOptions | string</code></td>\n<td>Toast 实例</td>\n</tr>\n<tr>\n<td>showLoadingToast</td>\n<td>展示加载提示</td>\n<td><code>ToastOptions | string</code></td>\n<td>Toast 实例</td>\n</tr>\n<tr>\n<td>showSuccessToast</td>\n<td>展示成功提示</td>\n<td><code>ToastOptions | string</code></td>\n<td>Toast 实例</td>\n</tr>\n<tr>\n<td>showFailToast</td>\n<td>展示失败提示</td>\n<td><code>ToastOptions | string</code></td>\n<td>Toast 实例</td>\n</tr>\n<tr>\n<td>closeToast</td>\n<td>关闭当前展示的提示</td>\n<td><code>closeAll: boolean</code></td>\n<td><code>void</code></td>\n</tr>\n<tr>\n<td>allowMultipleToast</td>\n<td>允许同时存在多个 Toast</td>\n<td>-</td>\n<td><code>void</code></td>\n</tr>\n<tr>\n<td>setToastDefaultOptions</td>\n<td>修改默认配置，影响所有的 <code>showToast</code> 调用。传入 type 可以修改指定类型 Toast 的默认配置</td>\n<td><code>type | ToastOptions</code></td>\n<td><code>void</code></td>\n</tr>\n<tr>\n<td>resetToastDefaultOptions</td>\n<td>重置默认配置，影响所有的 <code>showToast</code> 调用。传入 type 可以重置指定类型 Toast 的默认配置</td>\n<td><code>type</code></td>\n<td><code>void</code></td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="toastoptions-shu-ju-jie-gou" tabindex="-1">ToastOptions 数据结构</h3>\n<p>调用 <code>showToast</code> 等方法时，支持传入以下选项：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>提示类型，可选值为 <code>loading</code> <code>success</code> <code>fail</code> <code>html</code></td>\n<td><em>ToastType</em></td>\n<td><code>text</code></td>\n</tr>\n<tr>\n<td>position</td>\n<td>位置，可选值为 <code>top</code> <code>bottom</code></td>\n<td><em>ToastPosition</em></td>\n<td><code>middle</code></td>\n</tr>\n<tr>\n<td>message</td>\n<td>文本内容，支持通过<code>\\n</code>换行</td>\n<td><em>string</em></td>\n<td><code>\'\'</code></td>\n</tr>\n<tr>\n<td>wordBreak</td>\n<td>文本内容的换行方式，可选值为 <code>normal</code> <code>break-all</code> <code>break-word</code></td>\n<td><em>ToastWordBreak</em></td>\n<td><code>\'break-all\'</code></td>\n</tr>\n<tr>\n<td>icon</td>\n<td>自定义图标，支持传入图标名称或图片链接，等同于 Icon 组件的 <a href="#/zh-CN/icon#props" target="_blank">name 属性</a></td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>iconSize</td>\n<td>图标大小，如 <code>20px</code> <code>2em</code>，默认单位为 <code>px</code></td>\n<td><em>number | string</em></td>\n<td><code>36px</code></td>\n</tr>\n<tr>\n<td>iconPrefix</td>\n<td>图标类名前缀，等同于 Icon 组件的 <a href="#/zh-CN/icon#props" target="_blank">class-prefix 属性</a></td>\n<td><em>string</em></td>\n<td><code>mi-icon</code></td>\n</tr>\n<tr>\n<td>overlay</td>\n<td>是否显示背景遮罩层</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>forbidClick</td>\n<td>是否禁止背景点击</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>closeOnClick</td>\n<td>是否在点击后关闭</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>closeOnClickOverlay</td>\n<td>是否在点击遮罩层后关闭</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>loadingType</td>\n<td><a href="#/zh-CN/loading" target="_blank">加载图标类型</a>, 可选值为 <code>spinner</code></td>\n<td><em>string</em></td>\n<td><code>circular</code></td>\n</tr>\n<tr>\n<td>duration</td>\n<td>展示时长(ms)，值为 0 时，toast 不会消失</td>\n<td><em>number</em></td>\n<td><code>2000</code></td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td><em>string | Array | object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>overlayClass</td>\n<td>自定义遮罩层类名</td>\n<td><em>string | Array | object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>overlayStyle</td>\n<td>自定义遮罩层样式</td>\n<td><em>object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>transition</td>\n<td>动画类名，等价于 <a href="https://cn.vuejs.org/api/built-in-components.html#transition" target="_blank">transition</a> 的<code>name</code>属性</td>\n<td><em>string</em></td>\n<td><code>mi-fade</code></td>\n</tr>\n<tr>\n<td>teleport</td>\n<td>指定挂载的节点，等同于 Teleport 组件的 <a href="https://cn.vuejs.org/api/built-in-components.html#teleport" target="_blank">to 属性</a></td>\n<td><em>string | Element</em></td>\n<td><code>body</code></td>\n</tr>\n<tr>\n<td>z-index</td>\n<td>将组件的 z-index 层级设置为一个固定值</td>\n<td><em>number | string</em></td>\n<td><code>2000+</code></td>\n</tr>\n<tr>\n<td>onClose</td>\n<td>关闭时的回调函数</td>\n<td><em>Function</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>onOpened</td>\n<td>完全展示后的回调函数</td>\n<td><em>Function</em></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="props" tabindex="-1">Props</h3>\n<p>通过组件调用 <code>Toast</code> 时，支持以下 Props：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>提示类型，可选值为 <code>loading</code> <code>success</code> <code>fail</code> <code>html</code></td>\n<td><em>ToastType</em></td>\n<td><code>text</code></td>\n</tr>\n<tr>\n<td>position</td>\n<td>位置，可选值为 <code>top</code> <code>bottom</code></td>\n<td><em>ToastPosition</em></td>\n<td><code>middle</code></td>\n</tr>\n<tr>\n<td>message</td>\n<td>文本内容，支持通过<code>\\n</code>换行</td>\n<td><em>string</em></td>\n<td><code>\'\'</code></td>\n</tr>\n<tr>\n<td>word-break</td>\n<td>文本内容的换行方式，可选值为 <code>normal</code> <code>break-all</code> <code>break-word</code></td>\n<td><em>ToastWordBreak</em></td>\n<td><code>\'break-all\'</code></td>\n</tr>\n<tr>\n<td>icon</td>\n<td>自定义图标，支持传入图标名称或图片链接，等同于 Icon 组件的 <a href="#/zh-CN/icon#props" target="_blank">name 属性</a></td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>icon-size</td>\n<td>图标大小，如 <code>20px</code> <code>2em</code>，默认单位为 <code>px</code></td>\n<td><em>number | string</em></td>\n<td><code>36px</code></td>\n</tr>\n<tr>\n<td>icon-prefix</td>\n<td>图标类名前缀，等同于 Icon 组件的 <a href="#/zh-CN/icon#props" target="_blank">class-prefix 属性</a></td>\n<td><em>string</em></td>\n<td><code>mi-icon</code></td>\n</tr>\n<tr>\n<td>overlay</td>\n<td>是否显示背景遮罩层</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>forbid-click</td>\n<td>是否禁止背景点击</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>close-on-click</td>\n<td>是否在点击后关闭</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>close-on-click-overlay</td>\n<td>是否在点击遮罩层后关闭</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>loading-type</td>\n<td><a href="#/zh-CN/loading" target="_blank">加载图标类型</a>, 可选值为 <code>spinner</code></td>\n<td><em>string</em></td>\n<td><code>circular</code></td>\n</tr>\n<tr>\n<td>duration</td>\n<td>展示时长(ms)，值为 0 时，toast 不会消失</td>\n<td><em>number</em></td>\n<td><code>2000</code></td>\n</tr>\n<tr>\n<td>class-name</td>\n<td>自定义类名</td>\n<td><em>string | Array | object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>overlay-class</td>\n<td>自定义遮罩层类名</td>\n<td><em>string | Array | object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>overlay-style</td>\n<td>自定义遮罩层样式</td>\n<td><em>object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>transition</td>\n<td>动画类名，等价于 <a href="https://cn.vuejs.org/api/built-in-components.html#transition" target="_blank">transition</a> 的<code>name</code>属性</td>\n<td><em>string</em></td>\n<td><code>mi-fade</code></td>\n</tr>\n<tr>\n<td>teleport</td>\n<td>指定挂载的节点，等同于 Teleport 组件的 <a href="https://cn.vuejs.org/api/built-in-components.html#teleport" target="_blank">to 属性</a></td>\n<td><em>string | Element</em></td>\n<td><code>body</code></td>\n</tr>\n<tr>\n<td>z-index</td>\n<td>将组件的 z-index 层级设置为一个固定值</td>\n<td><em>number | string</em></td>\n<td><code>2000+</code></td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="events" tabindex="-1">Events</h3>\n<p>通过组件调用 <code>Toast</code> 时，支持以下事件：</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>说明</th>\n<th>回调参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>close</td>\n<td>关闭时的回调函数</td>\n<td>-</td>\n</tr>\n<tr>\n<td>opened</td>\n<td>完全展示后的回调函数</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="slots" tabindex="-1">Slots</h3>\n<p>使用 <code>Toast</code> 组件时，支持以下插槽：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>message</td>\n<td>自定义文本内容</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="lei-xing-ding-yi" tabindex="-1">类型定义</h3>\n<p>组件导出以下类型定义：</p>\n<pre><code class="language-ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> {\n    <span class="hljs-title class_">ToastType</span>,\n    <span class="hljs-title class_">ToastProps</span>,\n    <span class="hljs-title class_">ToastOptions</span>,\n    <span class="hljs-title class_">ToastPosition</span>,\n    <span class="hljs-title class_">ToastWordBreak</span>,\n    <span class="hljs-title class_">ToastWrapperInstance</span>,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n</code></pre>\n</div><h2 id="zhu-ti-ding-zhi" tabindex="-1">主题定制</h2>\n<div class="mi-doc-card"><h3 id="yang-shi-bian-liang" tabindex="-1">样式变量</h3>\n<p>组件提供了下列 CSS 变量，可用于自定义样式，使用方法请参考 <a href="#/zh-CN/config-provider" target="_blank">ConfigProvider 组件</a>。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--mi-toast-max-width</td>\n<td><em>70%</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-font-size</td>\n<td><em>var(--mi-font-size-md)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-text-color</td>\n<td><em>var(--mi-white)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-loading-icon-color</td>\n<td><em>var(--mi-white)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-line-height</td>\n<td><em>var(--mi-line-height-md)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-radius</td>\n<td><em>var(--mi-radius-lg)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-background</td>\n<td><em>fade(var(--mi-black), 70%)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-icon-size</td>\n<td><em>36px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-text-min-width</td>\n<td><em>96px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-text-padding</td>\n<td><em>var(--mi-padding-xs) var(--mi-padding-sm)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-default-padding</td>\n<td><em>var(--mi-padding-md)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-default-width</td>\n<td><em>88px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-default-min-height</td>\n<td><em>88px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-position-top-distance</td>\n<td><em>20%</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-toast-position-bottom-distance</td>\n<td><em>20%</em></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><h2 id="chang-jian-wen-ti" tabindex="-1">常见问题</h2>\n<div class="mi-doc-card"><h3 id="yin-yong-showtoast-shi-chu-xian-bian-yi-bao-cuo" tabindex="-1">引用 showToast 时出现编译报错？</h3>\n<p>如果引用 <code>showToast</code> 方法时出现以下报错，说明项目中使用了 <code>babel-plugin-import</code> 插件，导致代码被错误编译。</p>\n<pre><code class="language-bash">These dependencies were not found:\n\n* miracle/es/show-toast <span class="hljs-keyword">in</span> ./src/xxx.js\n* miracle/es/show-toast/style <span class="hljs-keyword">in</span> ./src/xxx.js\n</code></pre>\n</div>'},null,8,d))}}}]);