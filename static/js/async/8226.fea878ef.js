"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["8226"],{3159:function(t,n,s){s.r(n),s.d(n,{default:function(){return e}});var d=s(1147);let a=["innerHTML"],e={setup:()=>({html:""}),render:()=>((0,d.wg)(),(0,d.iD)("div",{class:"mi-doc-markdown-body",innerHTML:'<h1>Dialog 弹出框</h1>\n<div class="mi-doc-card"><h3 id="jie-shao" tabindex="-1">介绍</h3>\n<p>弹出模态框，常用于消息提示、消息确认，或在当前页面内完成特定的交互操作。支持组件调用和函数调用两种方式。</p>\n</div><div class="mi-doc-card"><h3 id="yin-ru" tabindex="-1">引入</h3>\n<p>通过以下方式来全局注册组件，更多注册方式请参考<a href="#/zh-CN/advanced-usage#zu-jian-zhu-ce" target="_blank">组件注册</a>。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Dialog</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>();\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Dialog</span>);\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="han-shu-diao-yong" tabindex="-1">函数调用</h3>\n<p>为了便于使用 <code>Dialog</code>，Miracle 提供了一系列辅助函数，通过辅助函数可以快速唤起全局的弹窗组件。</p>\n<p>比如使用 <code>showDialog</code> 函数，调用后会直接在页面中渲染对应的弹出框。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showDialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showDialog</span>({ <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;提示&#x27;</span> });\n</code></pre>\n</div><h2 id="dai-ma-yan-shi" tabindex="-1">代码演示</h2>\n<div class="mi-doc-card"><h3 id="xiao-xi-ti-shi" tabindex="-1">消息提示</h3>\n<p>用于提示一些消息，默认只包含一个确认按钮。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showDialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showDialog</span>({\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题&#x27;</span>,\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;代码是写出来给人看的，附带能在机器上运行。&#x27;</span>,\n}).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-comment">// on close</span>\n});\n\n<span class="hljs-title function_">showDialog</span>({\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;生命远不止连轴转和忙到极限，人类的体验远比这辽阔、丰富得多。&#x27;</span>,\n}).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-comment">// on close</span>\n});\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="xiao-xi-que-ren" tabindex="-1">消息确认</h3>\n<p>用于确认消息，默认包含确认和取消按钮。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showConfirmDialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showConfirmDialog</span>({\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题&#x27;</span>,\n    <span class="hljs-attr">message</span>:\n        <span class="hljs-string">&#x27;如果解决方法是丑陋的，那就肯定还有更好的解决方法，只是还没有发现而已。&#x27;</span>,\n})\n    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n        <span class="hljs-comment">// on confirm</span>\n    })\n    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> {\n        <span class="hljs-comment">// on cancel</span>\n    });\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="yuan-jiao-an-niu-feng-ge" tabindex="-1">圆角按钮风格</h3>\n<p>将 theme 选项设置为 <code>round-button</code> 可以展示圆角按钮风格的弹窗。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showDialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showDialog</span>({\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题&#x27;</span>,\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;代码是写出来给人看的，附带能在机器上运行。&#x27;</span>,\n    <span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;round-button&#x27;</span>,\n}).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-comment">// on close</span>\n});\n\n<span class="hljs-title function_">showDialog</span>({\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;生命远不止连轴转和忙到极限，人类的体验远比这辽阔、丰富得多。&#x27;</span>,\n    <span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;round-button&#x27;</span>,\n}).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-comment">// on close</span>\n});\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="yi-bu-guan-bi" tabindex="-1">异步关闭</h3>\n<p>通过 <code>beforeClose</code> 属性可以传入一个回调函数，在弹窗关闭前进行特定操作。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showConfirmDialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">beforeClose</span> = (<span class="hljs-params">action</span>) =&gt;\n    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {\n        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-comment">// action !== &#x27;confirm&#x27;  拦截取消操作</span>\n            <span class="hljs-title function_">resolve</span>(action === <span class="hljs-string">&#x27;confirm&#x27;</span>);\n        }, <span class="hljs-number">1000</span>);\n    });\n\n<span class="hljs-title function_">showConfirmDialog</span>({\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题&#x27;</span>,\n    <span class="hljs-attr">message</span>:\n        <span class="hljs-string">&#x27;如果解决方法是丑陋的，那就肯定还有更好的解决方法，只是还没有发现而已。&#x27;</span>,\n    beforeClose,\n});\n</code></pre>\n</div><div class="mi-doc-card"><h3 id="shi-yong-dialog-zu-jian" tabindex="-1">使用 Dialog 组件</h3>\n<p>如果你需要在 Dialog 内嵌入组件或其他自定义内容，可以直接使用 Dialog 组件，并使用默认插槽进行定制。使用前需要通过 <code>app.use</code> 等方式注册组件。</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mi-dialog</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;show&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;标题&quot;</span> <span class="hljs-attr">show-cancel-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/wuxingxi888/CDN_IMG_BED/avatar.jpg&quot;</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mi-dialog</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n        <span class="hljs-keyword">const</span> show = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n        <span class="hljs-keyword">return</span> { show };\n    },\n};\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="mi-doc-card"><h3 id="fang-fa" tabindex="-1">方法</h3>\n<p>Miracle 中导出了以下 Dialog 相关的辅助函数：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n<th>参数</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>showDialog</td>\n<td>展示消息提示弹窗，默认包含确认按钮</td>\n<td><em>options: DialogOptions</em></td>\n<td><code>Promise&lt;void&gt;</code></td>\n</tr>\n<tr>\n<td>showConfirmDialog</td>\n<td>展示消息确认弹窗，默认包含确认和取消按钮</td>\n<td><em>options: DialogOptions</em></td>\n<td><code>Promise&lt;void&gt;</code></td>\n</tr>\n<tr>\n<td>closeDialog</td>\n<td>关闭当前展示的弹窗</td>\n<td>-</td>\n<td><code>void</code></td>\n</tr>\n<tr>\n<td>setDialogDefaultOptions</td>\n<td>修改默认配置，影响所有的 <code>showDialog</code> 调用</td>\n<td><em>options: DialogOptions</em></td>\n<td><code>void</code></td>\n</tr>\n<tr>\n<td>resetDialogDefaultOptions</td>\n<td>重置默认配置，影响所有的 <code>showDialog</code> 调用</td>\n<td>-</td>\n<td><code>void</code></td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="dialogoptions" tabindex="-1">DialogOptions</h3>\n<p>调用 <code>showDialog</code> 等方法时，支持传入以下选项：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>width</td>\n<td>弹窗宽度，默认单位为 <code>px</code></td>\n<td><em>number | string</em></td>\n<td><code>320px</code></td>\n</tr>\n<tr>\n<td>message</td>\n<td>文本内容，支持通过 <code>\\n</code> 换行</td>\n<td><em>string | () =&gt; JSX.ELement</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>messageAlign</td>\n<td>内容对齐方式，可选值为 <code>left</code> <code>right</code></td>\n<td><em>string</em></td>\n<td><code>center</code></td>\n</tr>\n<tr>\n<td>theme</td>\n<td>样式风格，可选值为 <code>round-button</code></td>\n<td><em>string</em></td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td><em>string | Array | object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>showConfirmButton</td>\n<td>是否展示确认按钮</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>showCancelButton</td>\n<td>是否展示取消按钮</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>confirmButtonText</td>\n<td>确认按钮文案</td>\n<td><em>string</em></td>\n<td><code>确认</code></td>\n</tr>\n<tr>\n<td>confirmButtonColor</td>\n<td>确认按钮颜色</td>\n<td><em>string</em></td>\n<td><code>#ee0a24</code></td>\n</tr>\n<tr>\n<td>confirmButtonDisabled</td>\n<td>是否禁用确认按钮</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>cancelButtonText</td>\n<td>取消按钮文案</td>\n<td><em>string</em></td>\n<td><code>取消</code></td>\n</tr>\n<tr>\n<td>cancelButtonColor</td>\n<td>取消按钮颜色</td>\n<td><em>string</em></td>\n<td><code>black</code></td>\n</tr>\n<tr>\n<td>cancelButtonDisabled</td>\n<td>是否禁用取消按钮</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>overlay</td>\n<td>是否展示遮罩层</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>overlayClass</td>\n<td>自定义遮罩层类名</td>\n<td><em>string | Array | object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>overlayStyle</td>\n<td>自定义遮罩层样式</td>\n<td><em>object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>closeOnPopstate</td>\n<td>是否在页面回退时自动关闭</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>closeOnClickOverlay</td>\n<td>是否在点击遮罩层后关闭弹窗</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>lockScroll</td>\n<td>是否锁定背景滚动</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>allowHtml</td>\n<td>是否允许 message 内容中渲染 HTML</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>beforeClose</td>\n<td>关闭前的回调函数，返回 <code>false</code> 可阻止关闭，支持返回 Promise</td>\n<td><em>(action: string) =&gt; boolean | Promise&lt;boolean&gt;</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>transition</td>\n<td>动画类名，等价于 <a href="https://cn.vuejs.org/api/built-in-components.html#transition" target="_blank">transition</a> 的 <code>name</code> 属性</td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>teleport</td>\n<td>指定挂载的节点，等同于 Teleport 组件的 <a href="https://cn.vuejs.org/api/built-in-components.html#teleport" target="_blank">to 属性</a></td>\n<td><em>string | Element</em></td>\n<td><code>body</code></td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="props" tabindex="-1">Props</h3>\n<p>通过组件调用 <code>Dialog</code> 时，支持以下 Props：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v-model:show</td>\n<td>是否显示弹窗</td>\n<td><em>boolean</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>title</td>\n<td>标题</td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>width</td>\n<td>弹窗宽度，默认单位为 <code>px</code></td>\n<td><em>number | string</em></td>\n<td><code>320px</code></td>\n</tr>\n<tr>\n<td>message</td>\n<td>文本内容，支持通过 <code>\\n</code> 换行</td>\n<td><em>string | () =&gt; JSX.Element</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>message-align</td>\n<td>内容水平对齐方式，可选值为 <code>left</code> <code>right</code> <code>justify</code></td>\n<td><em>string</em></td>\n<td><code>center</code></td>\n</tr>\n<tr>\n<td>theme</td>\n<td>样式风格，可选值为 <code>round-button</code></td>\n<td><em>string</em></td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>show-confirm-button</td>\n<td>是否展示确认按钮</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>show-cancel-button</td>\n<td>是否展示取消按钮</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>confirm-button-text</td>\n<td>确认按钮文案</td>\n<td><em>string</em></td>\n<td><code>确认</code></td>\n</tr>\n<tr>\n<td>confirm-button-color</td>\n<td>确认按钮颜色</td>\n<td><em>string</em></td>\n<td><code>#ee0a24</code></td>\n</tr>\n<tr>\n<td>confirm-button-disabled</td>\n<td>是否禁用确认按钮</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>cancel-button-text</td>\n<td>取消按钮文案</td>\n<td><em>string</em></td>\n<td><code>取消</code></td>\n</tr>\n<tr>\n<td>cancel-button-color</td>\n<td>取消按钮颜色</td>\n<td><em>string</em></td>\n<td><code>black</code></td>\n</tr>\n<tr>\n<td>cancel-button-disabled</td>\n<td>是否禁用取消按钮</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>z-index</td>\n<td>将弹窗的 z-index 层级设置为一个固定值</td>\n<td><em>number | string</em></td>\n<td><code>2000+</code></td>\n</tr>\n<tr>\n<td>overlay</td>\n<td>是否展示遮罩层</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>overlay-class</td>\n<td>自定义遮罩层类名</td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>overlay-style</td>\n<td>自定义遮罩层样式</td>\n<td><em>object</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>close-on-popstate</td>\n<td>是否在页面回退时自动关闭</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>close-on-click-overlay</td>\n<td>是否在点击遮罩层后关闭弹窗</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>lazy-render</td>\n<td>是否在显示弹层时才渲染节点</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>lock-scroll</td>\n<td>是否锁定背景滚动</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>allow-html</td>\n<td>是否允许 message 内容中渲染 HTML</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>before-close</td>\n<td>关闭前的回调函数，返回 <code>false</code> 可阻止关闭，支持返回 Promise</td>\n<td><em>(action: string) =&gt; boolean | Promise&lt;boolean&gt;</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>transition</td>\n<td>动画类名，等价于 <a href="https://cn.vuejs.org/api/built-in-components.html#transition" target="_blank">transition</a> 的 <code>name</code> 属性</td>\n<td><em>string</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>teleport</td>\n<td>指定挂载的节点，等同于 Teleport 组件的 <a href="https://cn.vuejs.org/api/built-in-components.html#teleport" target="_blank">to 属性</a></td>\n<td><em>string | Element</em></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="events" tabindex="-1">Events</h3>\n<p>通过组件调用 <code>Dialog</code> 时，支持以下事件：</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>说明</th>\n<th>回调参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>confirm</td>\n<td>点击确认按钮时触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>cancel</td>\n<td>点击取消按钮时触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>open</td>\n<td>打开弹窗时触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>close</td>\n<td>关闭弹窗时触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>opened</td>\n<td>打开弹窗且动画结束后触发</td>\n<td>-</td>\n</tr>\n<tr>\n<td>closed</td>\n<td>关闭弹窗且动画结束后触发</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="slots" tabindex="-1">Slots</h3>\n<p>通过组件调用 <code>Dialog</code> 时，支持以下插槽：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default</td>\n<td>自定义内容</td>\n</tr>\n<tr>\n<td>title</td>\n<td>自定义标题</td>\n</tr>\n<tr>\n<td>footer</td>\n<td>自定义底部按钮区域</td>\n</tr>\n</tbody>\n</table>\n</div><div class="mi-doc-card"><h3 id="lei-xing-ding-yi" tabindex="-1">类型定义</h3>\n<p>组件导出以下类型定义：</p>\n<pre><code class="language-ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> {\n    <span class="hljs-title class_">DialogProps</span>,\n    <span class="hljs-title class_">DialogTheme</span>,\n    <span class="hljs-title class_">DialogMessage</span>,\n    <span class="hljs-title class_">DialogOptions</span>,\n    <span class="hljs-title class_">DialogMessageAlign</span>,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n</code></pre>\n</div><h2 id="zhu-ti-ding-zhi" tabindex="-1">主题定制</h2>\n<div class="mi-doc-card"><h3 id="yang-shi-bian-liang" tabindex="-1">样式变量</h3>\n<p>组件提供了下列 CSS 变量，可用于自定义样式，使用方法请参考 <a href="#/zh-CN/config-provider" target="_blank">ConfigProvider 组件</a>。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--mi-dialog-width</td>\n<td><em>320px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-small-screen-width</td>\n<td><em>90%</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-font-size</td>\n<td><em>var(--mi-font-size-lg)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-transition</td>\n<td><em>var(--mi-duration-base)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-radius</td>\n<td><em>16px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-background</td>\n<td><em>var(--mi-background-2)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-header-font-weight</td>\n<td><em>var(--mi-font-bold)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-header-line-height</td>\n<td><em>24px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-header-padding-top</td>\n<td><em>26px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-header-isolated-padding</td>\n<td><em>var(--mi-padding-lg) 0</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-message-padding</td>\n<td><em>var(--mi-padding-lg)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-message-font-size</td>\n<td><em>var(--mi-font-size-md)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-message-line-height</td>\n<td><em>var(--mi-line-height-md)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-message-max-height</td>\n<td><em>60vh</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-has-title-message-text-color</td>\n<td><em>var(--mi-gray-7)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-has-title-message-padding-top</td>\n<td><em>var(--mi-padding-xs)</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-button-height</td>\n<td><em>48px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-round-button-height</td>\n<td><em>36px</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>--mi-dialog-confirm-button-text-color</td>\n<td><em>var(--mi-primary-color)</em></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><h2 id="chang-jian-wen-ti" tabindex="-1">常见问题</h2>\n<div class="mi-doc-card"><h3 id="yin-yong-showdialog-shi-chu-xian-bian-yi-bao-cuo" tabindex="-1">引用 showDialog 时出现编译报错？</h3>\n<p>如果引用 <code>showDialog</code> 方法时出现以下报错，说明项目中使用了 <code>babel-plugin-import</code> 插件，导致代码被错误编译。</p>\n<pre><code class="language-bash">These dependencies were not found:\n\n* miracle/es/show-dialog <span class="hljs-keyword">in</span> ./src/xxx.js\n* miracle/es/show-dialog/style <span class="hljs-keyword">in</span> ./src/xxx.js\n</code></pre>\n<p>Miracle 不支持 <code>babel-plugin-import</code> 插件，请参考 <a href="#/zh-CN/migrate-from-v3#yi-chu-babel-plugin-import" target="_blank">迁移指南</a> 移除该插件。</p>\n</div><div class="mi-doc-card"><h3 id="zai-beforerouteleave-li-diao-yong-dialog-wu-fa-zhan-shi" tabindex="-1">在 beforeRouteLeave 里调用 Dialog 无法展示？</h3>\n<p>将 <code>closeOnPopstate</code> 属性设置为 false 即可。</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { showDialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@miracle-web/ui&#x27;</span>;\n\n<span class="hljs-title function_">showDialog</span>({\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题&#x27;</span>,\n    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;弹窗内容&#x27;</span>,\n    <span class="hljs-attr">closeOnPopstate</span>: <span class="hljs-literal">false</span>,\n}).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n    <span class="hljs-comment">// on close</span>\n});\n</code></pre>\n</div>'},null,8,a))}}}]);